/*  OpenDRT 
    -------------------------------------------------
      v0.1.2
      Written by Jed Smith
      https://github.com/jedypod/open-display-transform

      modified to expose more user parameters, for those who 
      know what they are doing and wish to experiment.
      
    -------------------------------------------------
*/

DEFINE_UI_PARAMS(in_gamut, input gamut, DCTLUI_COMBO_BOX, 1, {ap0, ap1, p3d65, rec2020, rec709, awg, rwg, sgamut3, blackmagicwg, egamut, davinciwg}, {AP0, AP1, P3D65, Rec.2020, Rec.709, Alexa Wide Gamut, Red Wide Gamut RGB, Sony SGamut3, Blackmagic Wide Gamut, Filmlight E - Gamut, DaVinci Wide Gamut})
DEFINE_UI_PARAMS(in_curve, input curve, DCTLUI_COMBO_BOX, 0, {linear, acescct, arri_logc, red_log3g10, sony_slog3, blackmagic_film_gen5, filmlight_tlog, davinci_intermediate}, {Linear, ACEScct, Arri V3LogC, Red Log3G10, Sony SLog3, Blackmagic Film Gen5, Filmlight TLog, DaVinci Intermediate})
DEFINE_UI_PARAMS(ex, exposure, DCTLUI_SLIDER_FLOAT, -0.26, -2, 2, 0.0)
DEFINE_UI_PARAMS(w1, white clip, DCTLUI_SLIDER_FLOAT, 1.04, 1.0, 1.24, 0.0)
DEFINE_UI_PARAMS(c0, contrast 0, DCTLUI_SLIDER_FLOAT, 1.2, 1, 1.4, 0.0)
DEFINE_UI_PARAMS(p, contrast 1, DCTLUI_SLIDER_FLOAT, 1.1, 0.8, 1.2, 0.0)
DEFINE_UI_PARAMS(fl, flare, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 0.02, 0.001)
DEFINE_UI_PARAMS(dch, dechroma, DCTLUI_SLIDER_FLOAT, 0.55, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(sat, saturation, DCTLUI_SLIDER_FLOAT, 1.1, 0.5, 1.5, 0.0)
DEFINE_UI_PARAMS(wr, red weight, DCTLUI_SLIDER_FLOAT, 0.18, 0.0, 0.33, 0.0)
DEFINE_UI_PARAMS(wg, green weight, DCTLUI_SLIDER_FLOAT, 0.1, 0.0, 0.33, 0.0)
DEFINE_UI_PARAMS(wb, blue weight, DCTLUI_SLIDER_FLOAT, 0.1, 0.0, 0.33, 0.0)
DEFINE_UI_PARAMS(wp, whitepoint, DCTLUI_COMBO_BOX, 3, {D50, D55, D60, D65, D75, D93}, {D50, D55, D60, D65, D75, D93})
DEFINE_UI_PARAMS(Lp, Lp, DCTLUI_SLIDER_FLOAT, 100.0, 100.0, 4000.0, 10.0)
DEFINE_UI_PARAMS(EOTF, inverse eotf, DCTLUI_COMBO_BOX, 2, {lin, srgb, rec1886, dci, pq, hlg}, {Linear, 2.2 Power sRGB Display, 2.4 Power Rec .1886, 2.6 Power DCI, ST 2084 PQ, HLG})
DEFINE_UI_PARAMS(display_gamut, display gamut, DCTLUI_COMBO_BOX, 4, {Rec2020, P3D65, P3D60, P3DCI, Rec709, DCDM}, {Rec.2020, P3 D65, P3 D60, P3 DCI, Rec.709, DCDM XYZ})
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0)

#include "libDRT.h"

__CONSTANT__ wpnorm wnd50 = {1.09063f, 1.1408f, 1.09928f, 1.2469f, 1.17646f, 1.0f};
__CONSTANT__ wpnorm wnd55 = {1.05337f, 1.08334f, 1.04391f, 1.18409f, 1.10416f, 1.0f};
__CONSTANT__ wpnorm wnd60 = {1.02355f, 1.037f, 1.00028f, 1.13345f, 1.0461f, 1.0f};
__CONSTANT__ wpnorm wnd65 = {1.0f, 1.0f, 1.08307f, 1.15054f, 1.0f, 1.0f};
__CONSTANT__ wpnorm wnd75 = {1.12915f, 1.13116f, 1.22512f, 1.30144f, 1.14486f, 1.0f};
__CONSTANT__ wpnorm wnd93 = {1.30631f, 1.31116f, 1.42007f, 1.50853f, 1.34374f, 1.0f};


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

  float3x3 in_to_xyz;
  if (in_gamut == ap0)                in_to_xyz = matrix_ap0_to_xyz;
  else if (in_gamut == ap1)           in_to_xyz = matrix_ap1_to_xyz;
  else if (in_gamut == p3d65)         in_to_xyz = matrix_p3d65_to_xyz;
  else if (in_gamut == rec2020)       in_to_xyz = matrix_rec2020_to_xyz;
  else if (in_gamut == rec709)        in_to_xyz = matrix_rec709_to_xyz;
  else if (in_gamut == awg)           in_to_xyz = matrix_arriwg_to_xyz;
  else if (in_gamut == rwg)           in_to_xyz = matrix_redwg_to_xyz;
  else if (in_gamut == sgamut3)       in_to_xyz = matrix_sonysgamut3;
  else if (in_gamut == blackmagicwg)  in_to_xyz = matrix_blackmagicwg_to_xyz;
  else if (in_gamut == egamut)        in_to_xyz = matrix_egamut_to_xyz;
  else if (in_gamut == davinciwg)     in_to_xyz = matrix_davinciwg_to_xyz;

  const float3x3 xyz_to_in = inv_f33(in_to_xyz);

  int tf;
  if (in_curve == linear)                     tf = 0;
  else if (in_curve == acescct)               tf = 1;
  else if (in_curve == arri_logc)             tf = 2;
  else if (in_curve == red_log3g10)           tf = 3;
  else if (in_curve == sony_slog3)            tf = 4;
  else if (in_curve == filmlight_tlog)        tf = 5;
  else if (in_curve == davinci_intermediate)  tf = 6;
  else if (in_curve == blackmagic_film_gen5)  tf = 7;

  float3 cats;
  wpnorm wn;
  if (wp == D50)         cats = catd50, wn = wnd50;
  else if (wp == D55)    cats = catd55, wn = wnd55;
  else if (wp == D60)    cats = catd60, wn = wnd60;
  else if (wp == D65)    cats = catd65, wn = wnd65;
  else if (wp == D75)    cats = catd75, wn = wnd75;
  else if (wp == D93)    cats = catd93, wn = wnd93;
  const float3x3 xyz_to_tlms = matrix_xyz_to_truelightlms;
  const float3x3 tlms_to_xyz = inv_f33(matrix_xyz_to_truelightlms);
  
  float3x3 xyz_to_display;
  float w_n;
  if (display_gamut == Rec2020)       xyz_to_display = inv_f33(matrix_rec2020_to_xyz), w_n = wn.rec2020;
  else if (display_gamut == P3D65)    xyz_to_display = inv_f33(matrix_p3d65_to_xyz), w_n = wn.p3d65;
  else if (display_gamut == P3D60)    xyz_to_display = inv_f33(matrix_p3d60_to_xyz), w_n = wn.p3d60;
  else if (display_gamut == P3DCI)    xyz_to_display = inv_f33(matrix_p3dci_to_xyz), w_n = wn.p3dci;
  else if (display_gamut == Rec709)   xyz_to_display = inv_f33(matrix_rec709_to_xyz), w_n = wn.rec709;
  else if (display_gamut == DCDM)     xyz_to_display = identity_mtx, w_n = wn.dcdm;

  const float3x3 display_to_xyz = inv_f33(xyz_to_display);

  int eotf;
  if (EOTF == lin)          eotf = 0;
  else if (EOTF == srgb)    eotf = 1;
  else if (EOTF == rec1886) eotf = 2;
  else if (EOTF == dci)     eotf = 3;
  else if (EOTF == pq)      eotf = 4;
  else if (EOTF == hlg)     eotf = 5;

  const float cs = _powf(0.18, 1.0f-c0);
  const float sy = w1*Lp/100.0f;
  const float e0 = _powf(2.0f, ex);
  const float sx = _powf(sy/e0, 1.0f/p);

  const float ds = eotf == 4 ? 0.01f : eotf == 5 ? 0.1f : 100.0f/Lp;
  const float clamp_max = ds*Lp/100.0f;

  const float3 vw = make_float3(wr, wg, wb);
  const float vwn = _sqrtf(vw.x*vw.x + vw.y*vw.y + vw.z*vw.z);


  float3 rgb = make_float3(p_R, p_G, p_B);


  if (invert == 0) {
    rgb = log2lin(rgb, tf);
    rgb = mult_f3_f33(rgb, in_to_xyz);
    float3 lms = mult_f3_f33(rgb, xyz_to_tlms);
    lms /= catd65;
    lms = maxf3(1e-12f, lms);
    float n = _sqrtf(_powf(vw.x * lms.x, 2.0f) + _powf(vw.y * lms.y, 2.0f) + _powf(vw.z * lms.z, 2.0f)) / vwn;
    lms /= n;
    float ts = n < 0.18f ? cs*_powf(n, c0) : c0*(n - 0.18f) + 0.18f;
    ts = sy*_powf(ts/(ts + sx), p);
    ts = ts*ts/(ts + fl);
    float ccf = _powf(sx/(n + sx), dch)*sat;
    lms = (1.0f - ccf) + lms*ccf;
    lms *= ts;
    lms *= cats / w_n;
    float3 xyz = mult_f3_f33(lms, tlms_to_xyz);
    rgb = mult_f3_f33(xyz, xyz_to_display);
    rgb *= ds;
    rgb = clampf3(rgb, 0.0f, clamp_max);
    float eotf_p = 2.0f + eotf * 0.2f;
    if ((eotf > 0) && (eotf < 4)) {
      rgb = powf3(rgb, 1.0f / eotf_p);
    } else if (eotf == 4) {
      rgb = eotf_pq(rgb, 1, 0);
    } else if (eotf == 5) {
      rgb = eotf_hlg(rgb, 1);
    }

  } else {
    rgb = clampf3(rgb, 0.0f, 1.0f);
    float eotf_p = 2.0f + eotf * 0.2f;
    if ((eotf > 0) && (eotf < 4)) {
      rgb = powf3(rgb, eotf_p);
    } else if (eotf == 4) {
      rgb = eotf_pq(rgb, 0, 0);
    } else if (eotf == 5) {
      rgb = eotf_hlg(rgb, 0);
    }
    rgb = clampf3(rgb, 0.0f, 1.0f);
    rgb /= ds;
    float3 xyz = mult_f3_f33(rgb, display_to_xyz);
    float3 lms = mult_f3_f33(xyz, xyz_to_tlms);
    lms /= cats;
    float n = _sqrtf(_powf(vw.x * lms.x, 2.0f) + _powf(vw.y * lms.y, 2.0f) + _powf(vw.z * lms.z, 2.0f)) / vwn;
    lms /= n;
    float ts = (n + _sqrtf(n*(4.0f*fl + n)))/2.0f;
    ts = sx/(_powf(sy/ts, 1.0f/p) - 1.0f);
    ts = ts < 0.18f ? _powf(ts/cs, 1.0f/c0) : (ts - 0.18f)/c0 + 0.18f;
    float ccf = _powf(sx / (n + sx), dch) * sat;
    lms = ((ccf - 1.0f) + lms)/ccf;
    lms *= ts;
    lms *= catd65;
    xyz = mult_f3_f33(lms, tlms_to_xyz);
    rgb = mult_f3_f33(xyz, xyz_to_in);
    rgb = lin2log(rgb, tf);
  }

  return rgb;
}