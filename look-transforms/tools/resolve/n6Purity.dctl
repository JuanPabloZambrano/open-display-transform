/* n6Purity - v0.0.1
	-------------------------
	Another tool on the theme of "Vibrance". 
	n6Purity adjusts the saturation of "mid-range" chroma values.
	The purity sliders adjust the saturation, and the strength sliders
	control how much of the chroma range to affect.
	
	---    
	Written by Jed Smith
	github.com/jedypod/open-display-transform
*/

DEFINE_UI_PARAMS(rp, red purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(rs, red strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)
DEFINE_UI_PARAMS(gp, green purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(gs, green strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)
DEFINE_UI_PARAMS(bp, blue purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(bs, blue strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)
DEFINE_UI_PARAMS(cp, cyan purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(cs, cyan strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)
DEFINE_UI_PARAMS(mp, magenta purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(ms, magenta strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)
DEFINE_UI_PARAMS(yp, yellow purity, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0)
DEFINE_UI_PARAMS(ys, yellow strength, DCTLUI_SLIDER_FLOAT, 2, 0, 4, 0)

// Safe division of float a by float b
__DEVICE__ float sdivf(float a, float b) {
  if (_fabs(b) < 0.0001f) return 0.0f;
  else return a / b;
}

// https://www.desmos.com/calculator/8tqz4rs0wm
__DEVICE__ float power_window(float x, float c, float p0, float p1, float x0, float x1) {
	return x > x1 ? 0.0f : x > c ? _powf(1.0f - _powf((x - c)/(x1 - c), p0), p1) : x > x0 ? _powf(1.0f - _powf((c - x)/(c - x0), p0), p1) : 0.0f;
}

// https://www.desmos.com/calculator/4qnakiivnj
__DEVICE__ float cubic_chroma(float x, float m, float s) {
	float p = m < 0.0f ? s : 2.0f*s;
	float c0 = 1.0f - _fabs(m);
	float a0 = p*(c0 - 1.0f);
	float b0 = (1.0f - c0)*(p + 1.0f);
	if (m > 0.0f) 
		return x > 1.0f ? c0*(x - 1.0f) + 1.0f : x < 0.0f ? x : 1.0f - (1.0f - x)*(_powf(1.0f - x, p)*(a0*(1.0f - x) + b0) + c0);
	else 
		return x < 0.0f ? c0*x : x > 1.0f ? x : x*(_powf(x, p)*(a0*x + b0) + c0);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) 
{
	float3 rgb = make_float3(p_R, p_G, p_B);

	// Calculate hue and "chroma"
	float mx = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
	float mn = _fminf(rgb.x, _fminf(rgb.y, rgb.z));
	float ch = mx - mn;
	float h;
	if (ch == 0.0f) h = 0.0f;
	else if (mx == rgb.x) h = _fmod((rgb.y - rgb.z) / ch + 6.0f, 6.0f);
	else if (mx == rgb.y) h = (rgb.z - rgb.x) / ch + 2.0f;
	else if (mx == rgb.z) h = (rgb.x - rgb.y) / ch + 4.0f;
	ch = sdivf(ch, mx);

	// Extract hue angles
	float hr = power_window(_fmod(h + 1.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);
	float hg = power_window(_fmod(h + 5.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);
	float hb = power_window(_fmod(h + 3.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);
	float hc = power_window(_fmod(h + 4.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);
	float hm = power_window(_fmod(h + 2.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);
	float hy = power_window(_fmod(h + 0.0f, 6.0f), 1.0f, 1.5f, 1.5f, 0.0f, 2.0f);

	// Cubic chroma compression curve
	float cr = sdivf(cubic_chroma(ch, rp, rs), ch);
	float cg = sdivf(cubic_chroma(ch, gp, gs), ch);
	float cb = sdivf(cubic_chroma(ch, bp, bs), ch);
	float cc = sdivf(cubic_chroma(ch, cp, cs), ch);
	float cm = sdivf(cubic_chroma(ch, mp, ms), ch);
	float cy = sdivf(cubic_chroma(ch, yp, ys), ch);

	// Combine all hue angles to single chroma compression factor
	float chf = (hr*cr + hg*cg + hb*cb + (1.0f - (hr + hg + hb)))*(hc*cc + hm*cm + hy*cy + (1.0f - (hc + hm + hy)));

	// Weighted sum of RGB 
	float wsum = rgb.x*0.3f + rgb.y*0.6f + rgb.z*0.1f;

	// Lerp towards wsum by chf
	float3 result = wsum*(1.0f - chf) + rgb*chf;
	return result;
}